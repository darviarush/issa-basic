// Generated by CoffeeScript 2.5.1
var CLASS, File, IssaBasic, SPACE, fs, fsAccess, fsMkdir, fsReadFile, fsWriteFile, util;

fs = require('fs');

util = require('util');

fsAccess = util.promisify(fs.access);

fsReadFile = util.promisify(fs.readFile);

fsWriteFile = util.promisify(fs.writeFile);

fsMkdir = util.promisify(fs.mkdir);

File = class File {
  constructor(path) {
    this.path = path;
  }

  async read(...args) {
    return (await fsReadFile(this.path, ...args));
  }

  async write(data, ...args) {
    return (await fsWriteFile(this.path, data, ...args));
  }

  async exists() {
    return (await fsAccess(this.path, fs.constants.F_OK));
  }

  mkpath() {
    var i, j, len, s, ss;
    ss = this.path.split(/\//);
    if (ss.length === 1) {
      return this;
    }
    ss.pop();
    s = ss.shift();
    for (j = 0, len = ss.length; j < len; j++) {
      i = ss[j];
      s = `${s}/${i}`;
      fsMkdir(s);
    }
    return this;
  }

};

CLASS = /[A-Z]\w+/;

SPACE = /[ \t]+/;

module.exports = IssaBasic = class IssaBasic {
  constructor() {
    this.classes = {}; // классы
  }

  
    // компилит конструктор
  compile_cls(f, cls) {
    var m;
    m = new File(`barsum/${cls}/new.iss`).read();
    // класс начинается с Class subclass ThisClass
    m.match(RegExp(`^(${CLASS})${SPACE}subclass${SPACE}(${CLASS})\\n`));
    return f.write(`module.exports = class ${cls} {
	constructor() {

	}
};`);
  }

  // Компилит метод
  compile(cls, method) {
    var a, f, m, r, ref;
    if (a = (ref = this.classes[cls]) != null ? ref[method] : void 0) {
      return a;
    }
    if (!this.classes[cls]) {
      compile_cls(cls);
    }
    // заменяем метод в файле класса
    m = new File(`barsum/${cls}/${method}.is`).read();
    f = new File(`barsum/${cls}/class.js`);
    if (!f.exists()) {
      this.compile_cls(f, cls);
    }
    r = f.read();
    r = r.replace(RegExp(`^\\t${method}\\(.*(^\\t\\t)*^\\t\\}`, "m"), '');
    return f.write(r);
  }

};
