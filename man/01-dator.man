= Issa Parser

Парсинг файла состоит из несколькоих шагов:

1. Получение списка лексем - lexanalyze
2. Маппинга лексем - map
3. Построение дерева по скобокам - partition
4. Грамматический анализ в скобках и свёртка лексем в дерево - grmanalyze
5. Обход получившегося дерева и преобразование его в код вторичного языка программирования - morph

Давайте разберём шаги на примерах.

== Калькулятор

Получим список лексем:

	use lib "lib";
	use Dator;
	
	my $calc = Dator->new(
		re => qr{
			(?<space>	\s+			) |
			(?<num>		\d+ 		) |
			(?<op>		[+\-*/()!_<] 	) |
			(?<mistic> 	.			)
		}xs,
		# название лексемы => функция-маппер
		map => {
			# пропускаем без изменений
			default => sub {$_},
			# отбрасываем пробелы
			space => sub {},
			# операторы и скобки
			op => sub {	$_->{lex} = $_->s; $_ },
			# выбрасываем исключение на странные символы
			mistic => sub {	die sprintf "%s:%i мистический символ %s#%i",
				$_->file, $_->lineno, $_->s, ord $_->s },
		},
		# пары открывающих-закрывающих скобок
		braces => {
			"(" 	=> ")",
			"if" 	=> "end",
			"for" 	=> "end"
		},
		# приоритеты и ассоциативность операторов
		op => {
			"<" => [6, Dator->xfx],
			"+" => [5, Dator->xfy],
			"-" => [5, Dator->yfx],
			"!" => [4, Dator->yf],
			"*" => [3, Dator->xfy],
			"/" => [3, Dator->xfy],
			"_" => [2, Dator->fx],
		},
		# таблица трансляции
		morph => {
			default => sub { $_->{operand}? $_->{operand}->S: $_->s },
			map({ $_ => sub { "($_->{operands}[0]{S} $_->{lex} $_->{operands}[1]{S})" } } qw{+ - * /}),
			"_" => sub { "{$_->{lex}$_->{operands}[0]{S}}" },
			"!" => sub { "[$_->{operands}[0]{S}$_->{lex}]" },
		},
		# файл который мы пасим. С ним будут выдаваться ошибки
		file => "ex.calc",
	);
			
Теперь проведём компилляцию:
	
	$calc->lexanalyze("1+6/2*3")->map->partition->rank->morph	# (1 + ((6 / 2) * 3))
	
	$calc->xprint;
		
Эти пять вызовов делает метод `translate`.

	$calc->translate("1/(2-3)")	# (1 / (2 - 3))
	
	$calc->xprint;

Левосторонняя и правосторонняя ассоциативность:

	$calc->translate("5+6+7")	# ((5 + 6) + 7)
	$calc->translate("5-6-7")	# (5 - (6 - 7))

Неассоциативность:

	$calc->translate("5<6<7")	#@ ~ <
	$calc->translate("_ _5")	#@ ~ _
	
Правосторонние правила:

	$calc->translate("1!+2!")			# ([1!] + [2!])

	$calc->translate("1+6/2!*_3!!")			# (1 + [[([(6 / 2)!] * {_3})!]!])
	
